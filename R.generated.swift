//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `Queries.graphql`.
    static let queriesGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "Queries", pathExtension: "graphql")
    /// Resource file `schema.json`.
    static let schemaJson = Rswift.FileResource(bundle: R.hostingBundle, name: "schema", pathExtension: "json")

    /// `bundle.url(forResource: "Queries", withExtension: "graphql")`
    static func queriesGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.queriesGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "schema", withExtension: "json")`
    static func schemaJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.schemaJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 119 images.
  struct image {
    /// Image `BadgeBug`.
    static let badgeBug = Rswift.ImageResource(bundle: R.hostingBundle, name: "BadgeBug")
    /// Image `BadgeDark`.
    static let badgeDark = Rswift.ImageResource(bundle: R.hostingBundle, name: "BadgeDark")
    /// Image `BadgeDragon`.
    static let badgeDragon = Rswift.ImageResource(bundle: R.hostingBundle, name: "BadgeDragon")
    /// Image `BadgeElectric`.
    static let badgeElectric = Rswift.ImageResource(bundle: R.hostingBundle, name: "BadgeElectric")
    /// Image `BadgeFairy`.
    static let badgeFairy = Rswift.ImageResource(bundle: R.hostingBundle, name: "BadgeFairy")
    /// Image `BadgeFighting`.
    static let badgeFighting = Rswift.ImageResource(bundle: R.hostingBundle, name: "BadgeFighting")
    /// Image `BadgeFire`.
    static let badgeFire = Rswift.ImageResource(bundle: R.hostingBundle, name: "BadgeFire")
    /// Image `BadgeFlying`.
    static let badgeFlying = Rswift.ImageResource(bundle: R.hostingBundle, name: "BadgeFlying")
    /// Image `BadgeGhost`.
    static let badgeGhost = Rswift.ImageResource(bundle: R.hostingBundle, name: "BadgeGhost")
    /// Image `BadgeGrass`.
    static let badgeGrass = Rswift.ImageResource(bundle: R.hostingBundle, name: "BadgeGrass")
    /// Image `BadgeGround`.
    static let badgeGround = Rswift.ImageResource(bundle: R.hostingBundle, name: "BadgeGround")
    /// Image `BadgeIce`.
    static let badgeIce = Rswift.ImageResource(bundle: R.hostingBundle, name: "BadgeIce")
    /// Image `BadgeInvisible`.
    static let badgeInvisible = Rswift.ImageResource(bundle: R.hostingBundle, name: "BadgeInvisible")
    /// Image `BadgeNormal`.
    static let badgeNormal = Rswift.ImageResource(bundle: R.hostingBundle, name: "BadgeNormal")
    /// Image `BadgePoison`.
    static let badgePoison = Rswift.ImageResource(bundle: R.hostingBundle, name: "BadgePoison")
    /// Image `BadgePsychic`.
    static let badgePsychic = Rswift.ImageResource(bundle: R.hostingBundle, name: "BadgePsychic")
    /// Image `BadgeRock`.
    static let badgeRock = Rswift.ImageResource(bundle: R.hostingBundle, name: "BadgeRock")
    /// Image `BadgeSteel`.
    static let badgeSteel = Rswift.ImageResource(bundle: R.hostingBundle, name: "BadgeSteel")
    /// Image `BadgeWater`.
    static let badgeWater = Rswift.ImageResource(bundle: R.hostingBundle, name: "BadgeWater")
    /// Image `GenerationIIISelected`.
    static let generationIIISelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "GenerationIIISelected")
    /// Image `GenerationIIIUnselected`.
    static let generationIIIUnselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "GenerationIIIUnselected")
    /// Image `GenerationIISelected`.
    static let generationIISelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "GenerationIISelected")
    /// Image `GenerationIIUnselected`.
    static let generationIIUnselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "GenerationIIUnselected")
    /// Image `GenerationISelected`.
    static let generationISelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "GenerationISelected")
    /// Image `GenerationIUnselected`.
    static let generationIUnselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "GenerationIUnselected")
    /// Image `GenerationIVSelected`.
    static let generationIVSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "GenerationIVSelected")
    /// Image `GenerationIVUnselected`.
    static let generationIVUnselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "GenerationIVUnselected")
    /// Image `GenerationVIIISelected`.
    static let generationVIIISelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "GenerationVIIISelected")
    /// Image `GenerationVIIIUnselected`.
    static let generationVIIIUnselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "GenerationVIIIUnselected")
    /// Image `GenerationVIISelected`.
    static let generationVIISelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "GenerationVIISelected")
    /// Image `GenerationVIIUnselected`.
    static let generationVIIUnselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "GenerationVIIUnselected")
    /// Image `GenerationVISelected`.
    static let generationVISelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "GenerationVISelected")
    /// Image `GenerationVIUnselected`.
    static let generationVIUnselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "GenerationVIUnselected")
    /// Image `GenerationVSelected`.
    static let generationVSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "GenerationVSelected")
    /// Image `GenerationVUnselected`.
    static let generationVUnselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "GenerationVUnselected")
    /// Image `Generation`.
    static let generation = Rswift.ImageResource(bundle: R.hostingBundle, name: "Generation")
    /// Image `HeightMediumSelected`.
    static let heightMediumSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "HeightMediumSelected")
    /// Image `HeightMediumUnselected`.
    static let heightMediumUnselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "HeightMediumUnselected")
    /// Image `HeightShortSelected`.
    static let heightShortSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "HeightShortSelected")
    /// Image `HeightShortUnselected`.
    static let heightShortUnselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "HeightShortUnselected")
    /// Image `HeightTallSelected`.
    static let heightTallSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "HeightTallSelected")
    /// Image `HeightTallUnselected`.
    static let heightTallUnselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "HeightTallUnselected")
    /// Image `IconHeightMedium`.
    static let iconHeightMedium = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconHeightMedium")
    /// Image `IconHeightShort`.
    static let iconHeightShort = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconHeightShort")
    /// Image `IconHeightTall`.
    static let iconHeightTall = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconHeightTall")
    /// Image `IconMenuBack`.
    static let iconMenuBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconMenuBack")
    /// Image `IconMenuFilter`.
    static let iconMenuFilter = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconMenuFilter")
    /// Image `IconMenuFront`.
    static let iconMenuFront = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconMenuFront")
    /// Image `IconMenuGenerations`.
    static let iconMenuGenerations = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconMenuGenerations")
    /// Image `IconMenuSearch`.
    static let iconMenuSearch = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconMenuSearch")
    /// Image `IconMenuSort`.
    static let iconMenuSort = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconMenuSort")
    /// Image `IconSelectedBug`.
    static let iconSelectedBug = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconSelectedBug")
    /// Image `IconSelectedDark`.
    static let iconSelectedDark = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconSelectedDark")
    /// Image `IconSelectedDragon`.
    static let iconSelectedDragon = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconSelectedDragon")
    /// Image `IconSelectedElectric`.
    static let iconSelectedElectric = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconSelectedElectric")
    /// Image `IconSelectedFairy`.
    static let iconSelectedFairy = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconSelectedFairy")
    /// Image `IconSelectedFighting`.
    static let iconSelectedFighting = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconSelectedFighting")
    /// Image `IconSelectedFire`.
    static let iconSelectedFire = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconSelectedFire")
    /// Image `IconSelectedFlying`.
    static let iconSelectedFlying = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconSelectedFlying")
    /// Image `IconSelectedGhost`.
    static let iconSelectedGhost = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconSelectedGhost")
    /// Image `IconSelectedGrass`.
    static let iconSelectedGrass = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconSelectedGrass")
    /// Image `IconSelectedGround`.
    static let iconSelectedGround = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconSelectedGround")
    /// Image `IconSelectedIce`.
    static let iconSelectedIce = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconSelectedIce")
    /// Image `IconSelectedNormal`.
    static let iconSelectedNormal = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconSelectedNormal")
    /// Image `IconSelectedPoison`.
    static let iconSelectedPoison = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconSelectedPoison")
    /// Image `IconSelectedPsychic`.
    static let iconSelectedPsychic = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconSelectedPsychic")
    /// Image `IconSelectedRock`.
    static let iconSelectedRock = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconSelectedRock")
    /// Image `IconSelectedSteel`.
    static let iconSelectedSteel = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconSelectedSteel")
    /// Image `IconSelectedWater`.
    static let iconSelectedWater = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconSelectedWater")
    /// Image `IconTypeBug`.
    static let iconTypeBug = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconTypeBug")
    /// Image `IconTypeDark`.
    static let iconTypeDark = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconTypeDark")
    /// Image `IconTypeDragon`.
    static let iconTypeDragon = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconTypeDragon")
    /// Image `IconTypeElectric`.
    static let iconTypeElectric = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconTypeElectric")
    /// Image `IconTypeFighting`.
    static let iconTypeFighting = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconTypeFighting")
    /// Image `IconTypeFire`.
    static let iconTypeFire = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconTypeFire")
    /// Image `IconTypeFlying`.
    static let iconTypeFlying = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconTypeFlying")
    /// Image `IconTypeGhost`.
    static let iconTypeGhost = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconTypeGhost")
    /// Image `IconTypeGrass`.
    static let iconTypeGrass = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconTypeGrass")
    /// Image `IconTypeGround`.
    static let iconTypeGround = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconTypeGround")
    /// Image `IconTypeIce`.
    static let iconTypeIce = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconTypeIce")
    /// Image `IconTypeNormal`.
    static let iconTypeNormal = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconTypeNormal")
    /// Image `IconTypePoison`.
    static let iconTypePoison = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconTypePoison")
    /// Image `IconTypePsychic`.
    static let iconTypePsychic = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconTypePsychic")
    /// Image `IconTypeRock`.
    static let iconTypeRock = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconTypeRock")
    /// Image `IconTypeSteel`.
    static let iconTypeSteel = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconTypeSteel")
    /// Image `IconTypeWater`.
    static let iconTypeWater = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconTypeWater")
    /// Image `IconUnSelectedBug `.
    static let iconUnSelectedBug = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconUnSelectedBug ")
    /// Image `IconUnselectedDark `.
    static let iconUnselectedDark = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconUnselectedDark ")
    /// Image `IconUnselectedDragon `.
    static let iconUnselectedDragon = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconUnselectedDragon ")
    /// Image `IconUnselectedElectric `.
    static let iconUnselectedElectric = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconUnselectedElectric ")
    /// Image `IconUnselectedFairy `.
    static let iconUnselectedFairy = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconUnselectedFairy ")
    /// Image `IconUnselectedFighting `.
    static let iconUnselectedFighting = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconUnselectedFighting ")
    /// Image `IconUnselectedFire `.
    static let iconUnselectedFire = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconUnselectedFire ")
    /// Image `IconUnselectedFlying `.
    static let iconUnselectedFlying = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconUnselectedFlying ")
    /// Image `IconUnselectedGhost `.
    static let iconUnselectedGhost = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconUnselectedGhost ")
    /// Image `IconUnselectedGrass `.
    static let iconUnselectedGrass = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconUnselectedGrass ")
    /// Image `IconUnselectedGround `.
    static let iconUnselectedGround = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconUnselectedGround ")
    /// Image `IconUnselectedIce `.
    static let iconUnselectedIce = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconUnselectedIce ")
    /// Image `IconUnselectedNormal `.
    static let iconUnselectedNormal = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconUnselectedNormal ")
    /// Image `IconUnselectedPoison `.
    static let iconUnselectedPoison = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconUnselectedPoison ")
    /// Image `IconUnselectedPsychic `.
    static let iconUnselectedPsychic = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconUnselectedPsychic ")
    /// Image `IconUnselectedRock `.
    static let iconUnselectedRock = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconUnselectedRock ")
    /// Image `IconUnselectedSteel `.
    static let iconUnselectedSteel = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconUnselectedSteel ")
    /// Image `IconUnselectedWater `.
    static let iconUnselectedWater = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconUnselectedWater ")
    /// Image `IconWeightHeavy`.
    static let iconWeightHeavy = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconWeightHeavy")
    /// Image `IconWeightLight`.
    static let iconWeightLight = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconWeightLight")
    /// Image `IconWeightNormal`.
    static let iconWeightNormal = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconWeightNormal")
    /// Image `PatternCircle`.
    static let patternCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "PatternCircle")
    /// Image `PatternPokeball`.
    static let patternPokeball = Rswift.ImageResource(bundle: R.hostingBundle, name: "PatternPokeball")
    /// Image `PatternSixByThree`.
    static let patternSixByThree = Rswift.ImageResource(bundle: R.hostingBundle, name: "PatternSixByThree")
    /// Image `PatternTenByFive`.
    static let patternTenByFive = Rswift.ImageResource(bundle: R.hostingBundle, name: "PatternTenByFive")
    /// Image `Pokebola`.
    static let pokebola = Rswift.ImageResource(bundle: R.hostingBundle, name: "Pokebola")
    /// Image `WeightHeavySelected`.
    static let weightHeavySelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "WeightHeavySelected")
    /// Image `WeightHeavyUnselected`.
    static let weightHeavyUnselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "WeightHeavyUnselected")
    /// Image `WeightLightSelected`.
    static let weightLightSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "WeightLightSelected")
    /// Image `WeightLightUnselected`.
    static let weightLightUnselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "WeightLightUnselected")
    /// Image `WeightNormalSelected`.
    static let weightNormalSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "WeightNormalSelected")
    /// Image `WeightNormalUnselected`.
    static let weightNormalUnselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "WeightNormalUnselected")
    /// Image `bulbasaur`.
    static let bulbasaur = Rswift.ImageResource(bundle: R.hostingBundle, name: "bulbasaur")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BadgeBug", bundle: ..., traitCollection: ...)`
    static func badgeBug(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.badgeBug, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BadgeDark", bundle: ..., traitCollection: ...)`
    static func badgeDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.badgeDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BadgeDragon", bundle: ..., traitCollection: ...)`
    static func badgeDragon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.badgeDragon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BadgeElectric", bundle: ..., traitCollection: ...)`
    static func badgeElectric(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.badgeElectric, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BadgeFairy", bundle: ..., traitCollection: ...)`
    static func badgeFairy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.badgeFairy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BadgeFighting", bundle: ..., traitCollection: ...)`
    static func badgeFighting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.badgeFighting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BadgeFire", bundle: ..., traitCollection: ...)`
    static func badgeFire(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.badgeFire, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BadgeFlying", bundle: ..., traitCollection: ...)`
    static func badgeFlying(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.badgeFlying, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BadgeGhost", bundle: ..., traitCollection: ...)`
    static func badgeGhost(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.badgeGhost, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BadgeGrass", bundle: ..., traitCollection: ...)`
    static func badgeGrass(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.badgeGrass, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BadgeGround", bundle: ..., traitCollection: ...)`
    static func badgeGround(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.badgeGround, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BadgeIce", bundle: ..., traitCollection: ...)`
    static func badgeIce(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.badgeIce, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BadgeInvisible", bundle: ..., traitCollection: ...)`
    static func badgeInvisible(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.badgeInvisible, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BadgeNormal", bundle: ..., traitCollection: ...)`
    static func badgeNormal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.badgeNormal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BadgePoison", bundle: ..., traitCollection: ...)`
    static func badgePoison(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.badgePoison, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BadgePsychic", bundle: ..., traitCollection: ...)`
    static func badgePsychic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.badgePsychic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BadgeRock", bundle: ..., traitCollection: ...)`
    static func badgeRock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.badgeRock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BadgeSteel", bundle: ..., traitCollection: ...)`
    static func badgeSteel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.badgeSteel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BadgeWater", bundle: ..., traitCollection: ...)`
    static func badgeWater(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.badgeWater, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Generation", bundle: ..., traitCollection: ...)`
    static func generation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.generation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GenerationIIISelected", bundle: ..., traitCollection: ...)`
    static func generationIIISelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.generationIIISelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GenerationIIIUnselected", bundle: ..., traitCollection: ...)`
    static func generationIIIUnselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.generationIIIUnselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GenerationIISelected", bundle: ..., traitCollection: ...)`
    static func generationIISelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.generationIISelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GenerationIIUnselected", bundle: ..., traitCollection: ...)`
    static func generationIIUnselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.generationIIUnselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GenerationISelected", bundle: ..., traitCollection: ...)`
    static func generationISelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.generationISelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GenerationIUnselected", bundle: ..., traitCollection: ...)`
    static func generationIUnselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.generationIUnselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GenerationIVSelected", bundle: ..., traitCollection: ...)`
    static func generationIVSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.generationIVSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GenerationIVUnselected", bundle: ..., traitCollection: ...)`
    static func generationIVUnselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.generationIVUnselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GenerationVIIISelected", bundle: ..., traitCollection: ...)`
    static func generationVIIISelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.generationVIIISelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GenerationVIIIUnselected", bundle: ..., traitCollection: ...)`
    static func generationVIIIUnselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.generationVIIIUnselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GenerationVIISelected", bundle: ..., traitCollection: ...)`
    static func generationVIISelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.generationVIISelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GenerationVIIUnselected", bundle: ..., traitCollection: ...)`
    static func generationVIIUnselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.generationVIIUnselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GenerationVISelected", bundle: ..., traitCollection: ...)`
    static func generationVISelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.generationVISelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GenerationVIUnselected", bundle: ..., traitCollection: ...)`
    static func generationVIUnselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.generationVIUnselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GenerationVSelected", bundle: ..., traitCollection: ...)`
    static func generationVSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.generationVSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GenerationVUnselected", bundle: ..., traitCollection: ...)`
    static func generationVUnselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.generationVUnselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HeightMediumSelected", bundle: ..., traitCollection: ...)`
    static func heightMediumSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heightMediumSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HeightMediumUnselected", bundle: ..., traitCollection: ...)`
    static func heightMediumUnselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heightMediumUnselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HeightShortSelected", bundle: ..., traitCollection: ...)`
    static func heightShortSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heightShortSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HeightShortUnselected", bundle: ..., traitCollection: ...)`
    static func heightShortUnselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heightShortUnselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HeightTallSelected", bundle: ..., traitCollection: ...)`
    static func heightTallSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heightTallSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HeightTallUnselected", bundle: ..., traitCollection: ...)`
    static func heightTallUnselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heightTallUnselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconHeightMedium", bundle: ..., traitCollection: ...)`
    static func iconHeightMedium(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconHeightMedium, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconHeightShort", bundle: ..., traitCollection: ...)`
    static func iconHeightShort(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconHeightShort, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconHeightTall", bundle: ..., traitCollection: ...)`
    static func iconHeightTall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconHeightTall, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconMenuBack", bundle: ..., traitCollection: ...)`
    static func iconMenuBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconMenuBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconMenuFilter", bundle: ..., traitCollection: ...)`
    static func iconMenuFilter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconMenuFilter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconMenuFront", bundle: ..., traitCollection: ...)`
    static func iconMenuFront(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconMenuFront, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconMenuGenerations", bundle: ..., traitCollection: ...)`
    static func iconMenuGenerations(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconMenuGenerations, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconMenuSearch", bundle: ..., traitCollection: ...)`
    static func iconMenuSearch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconMenuSearch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconMenuSort", bundle: ..., traitCollection: ...)`
    static func iconMenuSort(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconMenuSort, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconSelectedBug", bundle: ..., traitCollection: ...)`
    static func iconSelectedBug(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSelectedBug, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconSelectedDark", bundle: ..., traitCollection: ...)`
    static func iconSelectedDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSelectedDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconSelectedDragon", bundle: ..., traitCollection: ...)`
    static func iconSelectedDragon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSelectedDragon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconSelectedElectric", bundle: ..., traitCollection: ...)`
    static func iconSelectedElectric(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSelectedElectric, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconSelectedFairy", bundle: ..., traitCollection: ...)`
    static func iconSelectedFairy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSelectedFairy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconSelectedFighting", bundle: ..., traitCollection: ...)`
    static func iconSelectedFighting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSelectedFighting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconSelectedFire", bundle: ..., traitCollection: ...)`
    static func iconSelectedFire(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSelectedFire, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconSelectedFlying", bundle: ..., traitCollection: ...)`
    static func iconSelectedFlying(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSelectedFlying, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconSelectedGhost", bundle: ..., traitCollection: ...)`
    static func iconSelectedGhost(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSelectedGhost, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconSelectedGrass", bundle: ..., traitCollection: ...)`
    static func iconSelectedGrass(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSelectedGrass, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconSelectedGround", bundle: ..., traitCollection: ...)`
    static func iconSelectedGround(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSelectedGround, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconSelectedIce", bundle: ..., traitCollection: ...)`
    static func iconSelectedIce(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSelectedIce, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconSelectedNormal", bundle: ..., traitCollection: ...)`
    static func iconSelectedNormal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSelectedNormal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconSelectedPoison", bundle: ..., traitCollection: ...)`
    static func iconSelectedPoison(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSelectedPoison, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconSelectedPsychic", bundle: ..., traitCollection: ...)`
    static func iconSelectedPsychic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSelectedPsychic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconSelectedRock", bundle: ..., traitCollection: ...)`
    static func iconSelectedRock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSelectedRock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconSelectedSteel", bundle: ..., traitCollection: ...)`
    static func iconSelectedSteel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSelectedSteel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconSelectedWater", bundle: ..., traitCollection: ...)`
    static func iconSelectedWater(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSelectedWater, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconTypeBug", bundle: ..., traitCollection: ...)`
    static func iconTypeBug(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTypeBug, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconTypeDark", bundle: ..., traitCollection: ...)`
    static func iconTypeDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTypeDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconTypeDragon", bundle: ..., traitCollection: ...)`
    static func iconTypeDragon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTypeDragon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconTypeElectric", bundle: ..., traitCollection: ...)`
    static func iconTypeElectric(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTypeElectric, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconTypeFighting", bundle: ..., traitCollection: ...)`
    static func iconTypeFighting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTypeFighting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconTypeFire", bundle: ..., traitCollection: ...)`
    static func iconTypeFire(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTypeFire, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconTypeFlying", bundle: ..., traitCollection: ...)`
    static func iconTypeFlying(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTypeFlying, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconTypeGhost", bundle: ..., traitCollection: ...)`
    static func iconTypeGhost(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTypeGhost, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconTypeGrass", bundle: ..., traitCollection: ...)`
    static func iconTypeGrass(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTypeGrass, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconTypeGround", bundle: ..., traitCollection: ...)`
    static func iconTypeGround(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTypeGround, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconTypeIce", bundle: ..., traitCollection: ...)`
    static func iconTypeIce(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTypeIce, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconTypeNormal", bundle: ..., traitCollection: ...)`
    static func iconTypeNormal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTypeNormal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconTypePoison", bundle: ..., traitCollection: ...)`
    static func iconTypePoison(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTypePoison, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconTypePsychic", bundle: ..., traitCollection: ...)`
    static func iconTypePsychic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTypePsychic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconTypeRock", bundle: ..., traitCollection: ...)`
    static func iconTypeRock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTypeRock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconTypeSteel", bundle: ..., traitCollection: ...)`
    static func iconTypeSteel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTypeSteel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconTypeWater", bundle: ..., traitCollection: ...)`
    static func iconTypeWater(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTypeWater, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconUnSelectedBug ", bundle: ..., traitCollection: ...)`
    static func iconUnSelectedBug(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconUnSelectedBug, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconUnselectedDark ", bundle: ..., traitCollection: ...)`
    static func iconUnselectedDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconUnselectedDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconUnselectedDragon ", bundle: ..., traitCollection: ...)`
    static func iconUnselectedDragon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconUnselectedDragon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconUnselectedElectric ", bundle: ..., traitCollection: ...)`
    static func iconUnselectedElectric(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconUnselectedElectric, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconUnselectedFairy ", bundle: ..., traitCollection: ...)`
    static func iconUnselectedFairy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconUnselectedFairy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconUnselectedFighting ", bundle: ..., traitCollection: ...)`
    static func iconUnselectedFighting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconUnselectedFighting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconUnselectedFire ", bundle: ..., traitCollection: ...)`
    static func iconUnselectedFire(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconUnselectedFire, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconUnselectedFlying ", bundle: ..., traitCollection: ...)`
    static func iconUnselectedFlying(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconUnselectedFlying, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconUnselectedGhost ", bundle: ..., traitCollection: ...)`
    static func iconUnselectedGhost(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconUnselectedGhost, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconUnselectedGrass ", bundle: ..., traitCollection: ...)`
    static func iconUnselectedGrass(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconUnselectedGrass, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconUnselectedGround ", bundle: ..., traitCollection: ...)`
    static func iconUnselectedGround(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconUnselectedGround, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconUnselectedIce ", bundle: ..., traitCollection: ...)`
    static func iconUnselectedIce(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconUnselectedIce, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconUnselectedNormal ", bundle: ..., traitCollection: ...)`
    static func iconUnselectedNormal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconUnselectedNormal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconUnselectedPoison ", bundle: ..., traitCollection: ...)`
    static func iconUnselectedPoison(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconUnselectedPoison, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconUnselectedPsychic ", bundle: ..., traitCollection: ...)`
    static func iconUnselectedPsychic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconUnselectedPsychic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconUnselectedRock ", bundle: ..., traitCollection: ...)`
    static func iconUnselectedRock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconUnselectedRock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconUnselectedSteel ", bundle: ..., traitCollection: ...)`
    static func iconUnselectedSteel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconUnselectedSteel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconUnselectedWater ", bundle: ..., traitCollection: ...)`
    static func iconUnselectedWater(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconUnselectedWater, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconWeightHeavy", bundle: ..., traitCollection: ...)`
    static func iconWeightHeavy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWeightHeavy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconWeightLight", bundle: ..., traitCollection: ...)`
    static func iconWeightLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWeightLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconWeightNormal", bundle: ..., traitCollection: ...)`
    static func iconWeightNormal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWeightNormal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PatternCircle", bundle: ..., traitCollection: ...)`
    static func patternCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.patternCircle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PatternPokeball", bundle: ..., traitCollection: ...)`
    static func patternPokeball(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.patternPokeball, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PatternSixByThree", bundle: ..., traitCollection: ...)`
    static func patternSixByThree(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.patternSixByThree, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PatternTenByFive", bundle: ..., traitCollection: ...)`
    static func patternTenByFive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.patternTenByFive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Pokebola", bundle: ..., traitCollection: ...)`
    static func pokebola(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pokebola, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WeightHeavySelected", bundle: ..., traitCollection: ...)`
    static func weightHeavySelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.weightHeavySelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WeightHeavyUnselected", bundle: ..., traitCollection: ...)`
    static func weightHeavyUnselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.weightHeavyUnselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WeightLightSelected", bundle: ..., traitCollection: ...)`
    static func weightLightSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.weightLightSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WeightLightUnselected", bundle: ..., traitCollection: ...)`
    static func weightLightUnselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.weightLightUnselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WeightNormalSelected", bundle: ..., traitCollection: ...)`
    static func weightNormalSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.weightNormalSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WeightNormalUnselected", bundle: ..., traitCollection: ...)`
    static func weightNormalUnselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.weightNormalUnselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bulbasaur", bundle: ..., traitCollection: ...)`
    static func bulbasaur(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bulbasaur, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R {
  fileprivate init() {}
}
